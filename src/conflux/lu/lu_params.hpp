#include <tuple>
#include <vector>

namespace conflux {
template <typename T>
class lu_params {
   private:
       std::tuple<int, int, int> get_p_grid(int M, int N, int P) {
        double ratio = 1.0 * std::max(M, N) / std::min(M, N);
        int p1 = (int)std::cbrt(P / ratio);

        int Px = p1;
        int Py = ratio * p1;
        int Pz = P / (Px * Py);

        // sort the values
        std::vector<int> dims = {Px, Py, Pz};
        std::sort(dims.rbegin(), dims.rend());

        Px = dims[0];
        Py = dims[1];
        Pz = dims[2];

        return {Px, Py, Pz};
    }

    void initialize(int inpM, int inpN, int v, int Px, int Py, int Pz) {
        this->Px = Px;
        this->Py = Py;
        this->Pz = Pz;

        P = Px * Px * Pz;

        this->v = v;

        int nLocalTilesx = (int)(std::ceil((double)inpM / (v * Px)));
        int nLocalTilesy = (int)(std::ceil((double)inpN / (v * Py)));

        M = v * Px * nLocalTilesx;
        N = v * Py * nLocalTilesy;

        nlayr = (int)((v + Pz - 1) / Pz);

        InitMatrix();

        Nt = (int)(std::ceil((double)N / v));
        Mt = (int)(std::ceil((double)M / v));
        t = (int)(std::ceil((double)Nt / Py)) + 1ll;
        tA11x = (int)(std::ceil((double)Mt / Px));
        tA11y = (int)(std::ceil((double)Nt / Py));
    }

    void InitMatrix() {
        if (N == 16 && M == 16) {
            matrix = {
                1, 8, 2, 7, 3, 8, 2, 4, 8, 7, 5, 5, 1, 4, 4, 9,
                8, 4, 9, 2, 8, 6, 9, 9, 3, 7, 7, 7, 8, 7, 2, 8,
                3, 5, 4, 8, 9, 2, 7, 1, 2, 2, 7, 9, 8, 2, 1, 3,
                6, 4, 1, 5, 3, 7, 9, 1, 1, 3, 2, 9, 9, 5, 1, 9,
                8, 7, 100, 2, 9, 1, 1, 9, 3, 5, 8, 8, 5, 5, 3, 3,
                4, 2, 900, 3, 7, 3, 4, 5, 1, 9, 7, 7, 2, 4, 5, 2,  //pi=0, pj=1 owner of 900
                1, 9, 8, 3, 5, 5, 1, 3, 6, 8, 3, 4, 3, 9, 1, 9,
                3, 9, 2, 7, 9, 2, 3, 9, 8, 6, 3, 5, 5, 2, 2, 9,
                9, 9, 5, 4, 3, 4, 6, 6, 9, 2, 1, 5, 6, 9, 5, 7,
                3, 2, 4, 5, 2, 4, 5, 3, 6, 5, 2, 6, 2, 7, 8, 2,
                4, 4, 4, 5, 2, 5, 3, 4, 1, 7, 8, 1, 8, 8, 5, 4,
                4, 5, 9, 5, 7, 9, 2, 9, 4, 6, 4, 3, 5, 8, 1, 2,
                7, 8, 1, 4, 7, 6, 5, 7, 1, 2, 7, 3, 8, 1, 4, 4,
                7, 6, 7, 8, 2, 2, 4, 6, 6, 8, 3, 6, 5, 2, 6, 5,
                4, 5, 1, 5, 3, 7, 4, 4, 7, 5, 8, 2, 4, 7, 1, 7,
                8, 3, 2, 4, 3, 8, 1, 6, 9, 6, 3, 6, 4, 8, 7, 8};
        } else if (N == 27 && M == 27) {
            matrix = {4.0, 2.0, 0.0, 7.0, 0.0, 0.0, 1.0, 5.0, 4.0, 6.0, 8.0, 7.0, 0.0, 4.0, 3.0, 5.0, 3.0, 4.0, 0.0, 1.0, 1.0, 6.0, 7.0, 1.0, 8.0, 2.0, 3.0,
                                9.0, 0.0, 7.0, 2.0, 400.0, 3.0, 2.0, 8.0, 2.0, 9.0, 6.0, 3.0, 6.0, 6.0, 7.0, 9.0, 5.0, 2.0, 0.0, 7.0, 0.0, 2.0, 8.0, 8.0, 9.0, 4.0, 5.0,
                                1.0, 5.0, 3.0, 7.0, 1.0, 7.0, 0.0, 5.0, 0.0, 1.0, 3.0, 6.0, 7.0, 7.0, 7.0, 6.0, 9.0, 7.0, 9.0, 7.0, 5.0, 6.0, 2.0, 3.0, 5.0, 4.0, 4.0,
                                7.0, 7.0, 6.0, 9.0, 1.0, 6.0, 9.0, 3.0, 8.0, 9.0, 9.0, 3.0, 5.0, 5.0, 2.0, 1.0, 5.0, 8.0, 6.0, 8.0, 3.0, 0.0, 6.0, 2.0, 9.0, 9.0, 0.0,
                                7.0, 6.0, 7.0, 8.0, 7.0, 1.0, 7.0, 2.0, 1.0, 7.0, 2.0, 6.0, 8.0, 5.0, 2.0, 3.0, 3.0, 2.0, 2.0, 5.0, 9.0, 4.0, 6.0, 3.0, 5.0, 6.0, 2.0,
                                5.0, 0.0, 1.0, 0.0, 2.0, 1.0, 5.0, 4.0, 1.0, 5.0, 6.0, 0.0, 8.0, 5.0, 6.0, 0.0, 6.0, 7.0, 4.0, 0.0, 9.0, 6.0, 1.0, 3.0, 5.0, 6.0, 8.0,
                                1.0, 0.0, 1.0, 3.0, 6.0, 0.0, 3.0, 4.0, 6.0, 4.0, 6.0, 9.0, 6.0, 5.0, 4.0, 5.0, 3.0, 1.0, 1.0, 9.0, 2.0, 9.0, 4.0, 5.0, 3.0, 7.0, 0.0,
                                5.0, 7.0, 5.0, 3.0, 9.0, 0.0, 1.0, 3.0, 8.0, 2.0, 3.0, 8.0, 1.0, 0.0, 6.0, 4.0, 7.0, 8.0, 2.0, 8.0, 8.0, 8.0, 2.0, 5.0, 4.0, 3.0, 8.0,
                                2.0, 9.0, 4.0, 6.0, 4.0, 4.0, 6.0, 5.0, 5.0, 7.0, 1.0, 7.0, 2.0, 7.0, 2.0, 9.0, 4.0, 1.0, 2.0, 2.0, 8.0, 4.0, 7.0, 3.0, 4.0, 5.0, 0.0,
                                1.0, 5.0, 8.0, 5.0, 6.0, 6.0, 9.0, 7.0, 7.0, 2.0, 0.0, 8.0, 1.0, 9.0, 1.0, 8.0, 4.0, 5.0, 3.0, 5.0, 5.0, 7.0, 2.0, 3.0, 0.0, 5.0, 6.0,
                                2.0, 1.0, 7.0, 7.0, 7.0, 7.0, 1.0, 4.0, 1.0, 0.0, 4.0, 3.0, 0.0, 3.0, 8.0, 4.0, 6.0, 3.0, 1.0, 9.0, 8.0, 4.0, 8.0, 5.0, 8.0, 1.0, 5.0,
                                8.0, 8.0, 7.0, 3.0, 4.0, 5.0, 2.0, 4.0, 9.0, 7.0, 1.0, 6.0, 1.0, 9.0, 7.0, 8.0, 9.0, 8.0, 3.0, 7.0, 9.0, 9.0, 8.0, 6.0, 0.0, 5.0, 2.0,
                                0.0, 3.0, 0.0, 2.0, 6.0, 1.0, 3.0, 1.0, 5.0, 6.0, 7.0, 5.0, 6.0, 3.0, 9.0, 1.0, 3.0, 5.0, 1.0, 8.0, 5.0, 9.0, 3.0, 9.0, 4.0, 6.0, 5.0,
                                2.0, 2.0, 0.0, 0.0, 1.0, 6.0, 0.0, 0.0, 6.0, 7.0, 3.0, 5.0, 9.0, 8.0, 1.0, 3.0, 8.0, 4.0, 8.0, 4.0, 7.0, 8.0, 4.0, 7.0, 8.0, 4.0, 1.0,
                                0.0, 7.0, 0.0, 7.0, 9.0, 1.0, 6.0, 2.0, 0.0, 6.0, 8.0, 2.0, 3.0, 4.0, 1.0, 9.0, 7.0, 8.0, 0.0, 4.0, 5.0, 3.0, 6.0, 4.0, 3.0, 8.0, 6.0,
                                4.0, 0.0, 7.0, 2.0, 1.0, 1.0, 4.0, 3.0, 8.0, 4.0, 7.0, 2.0, 4.0, 4.0, 0.0, 9.0, 9.0, 3.0, 9.0, 5.0, 0.0, 4.0, 8.0, 8.0, 6.0, 7.0, 5.0,
                                0.0, 0.0, 9.0, 3.0, 2.0, 0.0, 9.0, 6.0, 7.0, 3.0, 5.0, 4.0, 9.0, 2.0, 4.0, 7.0, 0.0, 4.0, 3.0, 2.0, 4.0, 2.0, 6.0, 1.0, 8.0, 3.0, 0.0,
                                8.0, 6.0, 6.0, 5.0, 7.0, 1.0, 4.0, 9.0, 1.0, 8.0, 1.0, 2.0, 9.0, 1.0, 1.0, 6.0, 3.0, 9.0, 0.0, 7.0, 6.0, 7.0, 5.0, 0.0, 8.0, 4.0, 0.0,
                                1.0, 6.0, 1.0, 2.0, 4.0, 1.0, 6.0, 9.0, 5.0, 3.0, 9.0, 8.0, 6.0, 3.0, 8.0, 3.0, 6.0, 0.0, 3.0, 5.0, 5.0, 8.0, 3.0, 0.0, 9.0, 3.0, 1.0,
                                0.0, 5.0, 7.0, 6.0, 7.0, 1.0, 1.0, 4.0, 3.0, 8.0, 2.0, 9.0, 9.0, 7.0, 0.0, 9.0, 2.0, 9.0, 7.0, 6.0, 3.0, 9.0, 4.0, 1.0, 1.0, 7.0, 0.0,
                                3.0, 7.0, 1.0, 4.0, 3.0, 3.0, 3.0, 2.0, 5.0, 7.0, 9.0, 0.0, 7.0, 7.0, 0.0, 1.0, 2.0, 1.0, 7.0, 3.0, 9.0, 5.0, 7.0, 3.0, 2.0, 7.0, 4.0,
                                4.0, 7.0, 1.0, 1.0, 2.0, 3.0, 1.0, 7.0, 3.0, 8.0, 2.0, 5.0, 3.0, 6.0, 5.0, 7.0, 7.0, 6.0, 5.0, 1.0, 8.0, 5.0, 8.0, 3.0, 8.0, 4.0, 8.0,
                                1.0, 7.0, 6.0, 7.0, 0.0, 2.0, 7.0, 7.0, 4.0, 5.0, 3.0, 0.0, 6.0, 0.0, 7.0, 6.0, 6.0, 5.0, 6.0, 4.0, 8.0, 1.0, 7.0, 0.0, 5.0, 6.0, 6.0,
                                9.0, 2.0, 3.0, 1.0, 6.0, 2.0, 8.0, 7.0, 1.0, 6.0, 0.0, 8.0, 2.0, 8.0, 3.0, 8.0, 5.0, 6.0, 8.0, 3.0, 3.0, 8.0, 0.0, 5.0, 5.0, 9.0, 5.0,
                                3.0, 6.0, 6.0, 2.0, 4.0, 8.0, 3.0, 7.0, 2.0, 9.0, 6.0, 9.0, 2.0, 9.0, 1.0, 3.0, 6.0, 3.0, 0.0, 7.0, 5.0, 4.0, 6.0, 0.0, 6.0, 7.0, 8.0,
                                2.0, 5.0, 7.0, 2.0, 4.0, 7.0, 6.0, 1.0, 0.0, 4.0, 1.0, 0.0, 6.0, 7.0, 3.0, 7.0, 0.0, 6.0, 3.0, 7.0, 8.0, 2.0, 4.0, 1.0, 8.0, 7.0, 0.0,
                                0.0, 3.0, 5.0, 5.0, 6.0, 5.0, 2.0, 6.0, 9.0, 0.0, 0.0, 9.0, 5.0, 0.0, 2.0, 8.0, 3.0, 8.0, 0.0, 6.0, 9.0, 8.0, 4.0, 6.0, 5.0, 1.0, 9.0};
        } else if (N == 32 && M == 32) {
            matrix = {9.0, 4.0, 8.0, 8.0, 3.0, 8.0, 0.0, 5.0, 2.0, 1.0, 0.0, 6.0, 3.0, 7.0, 0.0, 3.0, 5.0, 7.0, 3.0, 6.0, 8.0, 6.0, 2.0, 0.0, 8.0, 0.0, 8.0, 5.0, 9.0, 7.0, 9.0, 3.0,
                                  7.0, 4.0, 4.0, 6.0, 8.0, 9.0, 7.0, 4.0, 4.0, 7.0, 2.0, 1.0, 3.0, 2.0, 2.0, 2.0, 0.0, 0.0, 9.0, 4.0, 3.0, 6.0, 2.0, 9.0, 7.0, 0.0, 4.0, 8.0, 9.0, 4.0, 6.0, 1.0,
                                  9.0, 2.0, 9.0, 6.0, 6.0, 5.0, 2.0, 1.0, 2.0, 1.0, 7.0, 3.0, 0.0, 9.0, 8.0, 9.0, 9.0, 1.0, 3.0, 7.0, 6.0, 1.0, 8.0, 2.0, 2.0, 5.0, 5.0, 5.0, 0.0, 8.0, 2.0, 1.0,
                                  8.0, 9.0, 8.0, 8.0, 6.0, 5.0, 0.0, 4.0, 3.0, 2.0, 7.0, 4.0, 0.0, 2.0, 6.0, 0.0, 8.0, 4.0, 4.0, 5.0, 8.0, 3.0, 6.0, 5.0, 2.0, 8.0, 7.0, 6.0, 8.0, 8.0, 7.0, 8.0,
                                  6.0, 6.0, 6.0, 7.0, 1.0, 8.0, 8.0, 0.0, 8.0, 1.0, 3.0, 7.0, 1.0, 8.0, 8.0, 5.0, 0.0, 2.0, 6.0, 9.0, 6.0, 2.0, 6.0, 5.0, 7.0, 1.0, 7.0, 5.0, 9.0, 3.0, 6.0, 9.0,
                                  1.0, 9.0, 6.0, 0.0, 3.0, 7.0, 0.0, 5.0, 3.0, 6.0, 0.0, 8.0, 9.0, 9.0, 7.0, 1.0, 7.0, 0.0, 0.0, 3.0, 4.0, 7.0, 6.0, 4.0, 2.0, 9.0, 4.0, 4.0, 1.0, 7.0, 6.0, 2.0,
                                  0.0, 6.0, 6.0, 2.0, 9.0, 1.0, 4.0, 9.0, 4.0, 6.0, 3.0, 2.0, 9.0, 4.0, 8.0, 2.0, 2.0, 0.0, 6.0, 3.0, 8.0, 4.0, 9.0, 1.0, 8.0, 7.0, 7.0, 8.0, 7.0, 6.0, 1.0, 0.0,
                                  9.0, 6.0, 7.0, 4.0, 1.0, 1.0, 6.0, 4.0, 2.0, 4.0, 0.0, 5.0, 2.0, 7.0, 3.0, 4.0, 0.0, 0.0, 3.0, 4.0, 6.0, 2.0, 6.0, 8.0, 7.0, 0.0, 4.0, 1.0, 2.0, 9.0, 1.0, 4.0,
                                  6.0, 7.0, 5.0, 0.0, 3.0, 5.0, 0.0, 3.0, 0.0, 0.0, 3.0, 1.0, 5.0, 6.0, 8.0, 2.0, 1.0, 1.0, 6.0, 7.0, 0.0, 9.0, 0.0, 5.0, 7.0, 8.0, 7.0, 8.0, 3.0, 8.0, 0.0, 8.0,
                                  5.0, 8.0, 4.0, 6.0, 5.0, 7.0, 0.0, 0.0, 2.0, 1.0, 8.0, 2.0, 9.0, 3.0, 1.0, 7.0, 6.0, 4.0, 5.0, 7.0, 2.0, 9.0, 9.0, 6.0, 1.0, 6.0, 0.0, 0.0, 2.0, 4.0, 8.0, 7.0,
                                  7.0, 4.0, 3.0, 3.0, 9.0, 0.0, 8.0, 5.0, 4.0, 7.0, 4.0, 8.0, 9.0, 4.0, 2.0, 5.0, 9.0, 2.0, 6.0, 6.0, 7.0, 1.0, 7.0, 9.0, 1.0, 2.0, 9.0, 1.0, 8.0, 4.0, 2.0, 8.0,
                                  4.0, 5.0, 3.0, 5.0, 1.0, 3.0, 9.0, 2.0, 6.0, 3.0, 7.0, 1.0, 9.0, 4.0, 2.0, 0.0, 1.0, 5.0, 3.0, 8.0, 4.0, 2.0, 6.0, 7.0, 1.0, 1.0, 0.0, 7.0, 6.0, 4.0, 8.0, 8.0,
                                  5.0, 8.0, 2.0, 1.0, 2.0, 0.0, 5.0, 9.0, 0.0, 1.0, 4.0, 9.0, 3.0, 5.0, 0.0, 1.0, 9.0, 9.0, 0.0, 9.0, 6.0, 8.0, 4.0, 5.0, 4.0, 6.0, 1.0, 0.0, 3.0, 7.0, 2.0, 6.0,
                                  9.0, 0.0, 6.0, 4.0, 8.0, 1.0, 6.0, 8.0, 9.0, 6.0, 4.0, 6.0, 8.0, 5.0, 0.0, 9.0, 6.0, 6.0, 2.0, 6.0, 3.0, 6.0, 1.0, 6.0, 9.0, 0.0, 9.0, 4.0, 8.0, 7.0, 5.0, 7.0,
                                  8.0, 4.0, 3.0, 6.0, 8.0, 7.0, 7.0, 4.0, 8.0, 1.0, 5.0, 0.0, 3.0, 3.0, 3.0, 6.0, 3.0, 4.0, 2.0, 3.0, 2.0, 0.0, 6.0, 6.0, 6.0, 4.0, 3.0, 8.0, 5.0, 4.0, 0.0, 3.0,
                                  3.0, 3.0, 5.0, 5.0, 6.0, 7.0, 8.0, 7.0, 9.0, 0.0, 1.0, 0.0, 6.0, 8.0, 2.0, 9.0, 0.0, 9.0, 3.0, 1.0, 4.0, 2.0, 2.0, 3.0, 8.0, 5.0, 3.0, 6.0, 7.0, 2.0, 4.0, 1.0,
                                  1.0, 6.0, 1.0, 5.0, 7.0, 1.0, 5.0, 2.0, 9.0, 4.0, 8.0, 5.0, 0.0, 6.0, 9.0, 6.0, 8.0, 8.0, 2.0, 2.0, 6.0, 4.0, 8.0, 9.0, 3.0, 2.0, 7.0, 2.0, 8.0, 4.0, 6.0, 0.0,
                                  6.0, 4.0, 5.0, 1.0, 7.0, 8.0, 2.0, 0.0, 0.0, 6.0, 6.0, 5.0, 2.0, 3.0, 5.0, 4.0, 9.0, 1.0, 6.0, 4.0, 4.0, 7.0, 6.0, 9.0, 1.0, 1.0, 7.0, 5.0, 2.0, 0.0, 0.0, 8.0,
                                  1.0, 3.0, 2.0, 3.0, 0.0, 5.0, 0.0, 8.0, 2.0, 5.0, 8.0, 6.0, 5.0, 3.0, 3.0, 6.0, 9.0, 6.0, 5.0, 7.0, 4.0, 0.0, 5.0, 9.0, 1.0, 6.0, 2.0, 5.0, 0.0, 4.0, 7.0, 3.0,
                                  6.0, 7.0, 9.0, 2.0, 3.0, 1.0, 9.0, 9.0, 5.0, 8.0, 5.0, 6.0, 0.0, 7.0, 1.0, 8.0, 7.0, 7.0, 0.0, 3.0, 2.0, 3.0, 0.0, 9.0, 5.0, 3.0, 3.0, 4.0, 6.0, 5.0, 9.0, 4.0,
                                  9.0, 8.0, 2.0, 9.0, 1.0, 8.0, 3.0, 8.0, 8.0, 8.0, 7.0, 3.0, 0.0, 4.0, 1.0, 6.0, 3.0, 9.0, 6.0, 8.0, 1.0, 8.0, 9.0, 4.0, 6.0, 7.0, 1.0, 5.0, 3.0, 1.0, 3.0, 0.0,
                                  0.0, 1.0, 9.0, 5.0, 9.0, 4.0, 3.0, 5.0, 4.0, 1.0, 6.0, 2.0, 6.0, 6.0, 1.0, 0.0, 7.0, 4.0, 0.0, 9.0, 0.0, 6.0, 9.0, 2.0, 1.0, 1.0, 3.0, 1.0, 6.0, 0.0, 5.0, 9.0,
                                  8.0, 6.0, 3.0, 6.0, 5.0, 4.0, 1.0, 8.0, 4.0, 1.0, 3.0, 4.0, 8.0, 7.0, 7.0, 0.0, 4.0, 4.0, 0.0, 2.0, 7.0, 1.0, 5.0, 2.0, 0.0, 2.0, 9.0, 8.0, 9.0, 4.0, 1.0, 5.0,
                                  4.0, 8.0, 0.0, 4.0, 1.0, 3.0, 7.0, 4.0, 3.0, 3.0, 4.0, 7.0, 8.0, 9.0, 7.0, 3.0, 6.0, 4.0, 2.0, 8.0, 0.0, 9.0, 4.0, 6.0, 6.0, 8.0, 6.0, 6.0, 0.0, 5.0, 1.0, 7.0,
                                  5.0, 6.0, 0.0, 0.0, 7.0, 0.0, 0.0, 0.0, 9.0, 7.0, 3.0, 2.0, 3.0, 7.0, 6.0, 1.0, 1.0, 0.0, 6.0, 7.0, 2.0, 0.0, 0.0, 9.0, 2.0, 7.0, 6.0, 3.0, 2.0, 1.0, 6.0, 7.0,
                                  6.0, 5.0, 0.0, 9.0, 7.0, 2.0, 9.0, 6.0, 5.0, 7.0, 8.0, 6.0, 1.0, 3.0, 9.0, 2.0, 3.0, 4.0, 4.0, 6.0, 9.0, 2.0, 1.0, 1.0, 8.0, 6.0, 2.0, 8.0, 8.0, 8.0, 9.0, 2.0,
                                  7.0, 4.0, 8.0, 7.0, 7.0, 6.0, 1.0, 5.0, 9.0, 9.0, 0.0, 1.0, 1.0, 7.0, 8.0, 2.0, 5.0, 8.0, 7.0, 5.0, 5.0, 5.0, 2.0, 5.0, 6.0, 8.0, 6.0, 7.0, 1.0, 4.0, 0.0, 2.0,
                                  7.0, 9.0, 0.0, 4.0, 8.0, 2.0, 5.0, 7.0, 6.0, 1.0, 3.0, 7.0, 5.0, 0.0, 7.0, 0.0, 7.0, 2.0, 9.0, 3.0, 3.0, 1.0, 3.0, 8.0, 9.0, 3.0, 4.0, 7.0, 8.0, 5.0, 3.0, 4.0,
                                  6.0, 0.0, 6.0, 3.0, 7.0, 0.0, 5.0, 4.0, 6.0, 0.0, 5.0, 5.0, 5.0, 6.0, 6.0, 8.0, 2.0, 8.0, 4.0, 0.0, 0.0, 3.0, 7.0, 7.0, 7.0, 5.0, 4.0, 1.0, 3.0, 4.0, 0.0, 2.0,
                                  5.0, 7.0, 9.0, 9.0, 6.0, 4.0, 6.0, 7.0, 1.0, 4.0, 8.0, 3.0, 5.0, 5.0, 1.0, 3.0, 3.0, 0.0, 0.0, 8.0, 2.0, 5.0, 2.0, 9.0, 2.0, 4.0, 8.0, 8.0, 1.0, 8.0, 4.0, 4.0,
                                  1.0, 0.0, 7.0, 4.0, 4.0, 7.0, 7.0, 1.0, 6.0, 1.0, 7.0, 6.0, 9.0, 0.0, 0.0, 2.0, 2.0, 2.0, 9.0, 2.0, 2.0, 7.0, 4.0, 7.0, 0.0, 4.0, 0.0, 0.0, 9.0, 1.0, 5.0, 4.0,
                                  3.0, 8.0, 0.0, 6.0, 9.0, 5.0, 9.0, 0.0, 4.0, 2.0, 7.0, 9.0, 2.0, 6.0, 1.0, 5.0, 4.0, 9.0, 6.0, 3.0, 1.0, 1.0, 2.0, 2.0, 8.0, 5.0, 5.0, 1.0, 8.0, 7.0, 0.0, 7.0};
        } else {
            matrix = std::vector<T>(M * N);

            std::mt19937_64 eng(seed);
            std::uniform_real_distribution<T> dist;
            auto generator = std::bind(dist, eng);
            for (int i = 0; i < matrix.size(); ++i) {
                matrix[i] = generator();
            }
            /*
            std::generate(matrix.begin(), matrix.end(), generator);
            */
        }
    }

   public:
    int M, N, P;
    // Px refers to rows
    // Py refers to cols
    // Pz refers to height
    int Px, Py, Pz;
    int v, nlayr, Mt, Nt, t, tA11x, tA11y;
    int seed = 42;
    std::vector<T> matrix;

    lu_params() = default;

    lu_params(int inpM, int inpN, int v, int inpP) {
        std::tie(Px, Py, Pz) = get_p_grid(inpM, inpN, inpP);
        initialize(inpM, inpN, v, Px, Py, Pz);
    }

    lu_params(int inpM, int inpN, int v, int Px, int Py, int Pz) {
        initialize(inpM, inpN, v, Px, Py, Pz);
    }
};
}
